//#version 320 es
precision highp float;

out vec4 FragColor; //output pixel color
uniform float uAlphaFactor; //for semi-transparency
uniform int uAlphaBlending; //for semi-transparency
uniform int uDiscardNormalsOut; //for lines an tips

uniform float uHighLightLevel;
uniform vec4 uHighLightColor;

#if defined(USE_NORMALS)
	in vec3 vNormal; //normal passed from rasterizer
	uniform float uEdgeAlpha; //<0-dissolve, >0-reveal
#endif
#if defined(USE_TEX0)
	uniform sampler2D uTex0;  //texture id
	uniform sampler2D uTex3;  //translate texture id
	uniform int uTex0translateChannelN;
	uniform vec4 uColor1;
	uniform vec4 uColor2;
#else
	uniform vec4 uColor;
#endif
#if defined(USE_TEXMODS)
	uniform mat4 uTexMods;
#endif

#if defined(USE_TUV0)
	in vec2 vTuv; //varying TUV (passed from vertex shader)
#endif
#if defined(MIRROR)
	in vec2 vTuvMirror; //varying TUV (passed from vertex shader)
#endif
#if defined(OVERMASK)
	uniform sampler2D uTex1mask;  //texture id
	uniform int uTex1alphaChannelN;
	uniform int uTex1alphaNegative;
#endif

#if defined(PHONG)
	uniform float uAmbient;
	uniform float uSpecularIntencity;
	uniform vec2 uSpecularMinDot;
	uniform float uSpecularPowerOf;
	uniform float uBleach;
	uniform float uShadingK;

	uniform vec3 uVectorToLight; //for specular
	uniform float uTranslucency;
	uniform vec3 uVectorToTranslucent;
	in vec3 vHalfVector;
#endif

#if defined(WITHSHADOWS)
	in vec3 vDMcoords; //varying TUV for depth map (passed from vertex shader)
	uniform sampler2D uTex4dm;  //depth map texture id
	uniform float uShadow;
#endif

void main(void) {
	vec4 outColor;
	float alpha = 1.0;
	
#if defined(OVERMASK)
	outColor = texture(uTex1mask, vTuv);
	alpha = outColor[uTex1alphaChannelN];
	if(uTex1alphaNegative > 0)
		alpha = 1.0 - alpha;
	if(alpha < 0.5){
		if(uAlphaBlending > 0){
			if(alpha == 0.0){
				discard;
				return;
			}
		}
		else{ //no AlphaBlending
			discard;
			return;
		}
	}
#endif
#if defined(USE_TEX0)
	#if defined(MIRROR)
		outColor = texture(uTex0, vTuvMirror);
	#else
		outColor = texture(uTex0, vTuv);
	#endif
	if(uTex0translateChannelN >= 4){ //translate channel to 2-tone
		float val = outColor[uTex0translateChannelN-4];
		if(val <= 0.0)
			outColor = uColor2;
		else 
		if(val >= 1.0)
			outColor = uColor1;
		else
			outColor = uColor1*val + uColor2*(1.0-val);
	}
	else 
	if(uTex0translateChannelN >= 0){ //translate channel
		vec2 tuv3;
		tuv3[0] = outColor[uTex0translateChannelN];
		tuv3[1] = 0.0;
		#if defined(USE_TEXMODS)
			if(uTexMods[3][0] >0.0)
				tuv3[0] = tuv3[0]*uTexMods[3][1] + uTexMods[3][2];
		#endif
		outColor = texture(uTex3, tuv3);
	}
	FragColor = outColor;
#else
	FragColor = uColor;
#endif
	if(FragColor.a != 1.0){
		alpha *= FragColor.a;
		if(alpha < 0.5){
			if(uAlphaBlending > 0){
				if(alpha == 0.0){
					discard;
					return;
				}
			}
			else{ //no AlphaBlending
				discard;
				return;
			}
		}
	}


#if defined(USE_NORMALS)
	if(vNormal[2] < 0.0)
	if(uDiscardNormalsOut > 0){
		discard;
		return;
	}
	vec3 vNormalNormal = normalize(vNormal);
	
	if(uEdgeAlpha!=0.0){
		float edgeWidth=1.0; //clouds
		if(uEdgeAlpha > 0.0)
			edgeWidth=0.5; //glass
		if(vNormalNormal[2]<edgeWidth){
			float edgeAlphaD=(1.0-vNormalNormal[2]/edgeWidth)*uEdgeAlpha;
			alpha+=edgeAlphaD;
			if(alpha>1.0)
				alpha=1.0;
			else if(alpha<=0.0){
				discard;
				return;
			}
		}
			//FragColor=vec4(1.0,0.0,0.0,1.0);
	}
#endif

#if defined(WITHSHADOWS)
	float maxLight = 100.0;
	if(vDMcoords.x >= 0.0)
	if(vDMcoords.x <= 1.0)
	if(vDMcoords.y >= 0.0)
	if(vDMcoords.y <= 1.0){
		float dmDepth = texture(uTex4dm, vDMcoords.xy).r;
		if(dmDepth<1.0)
		if(dmDepth < vDMcoords.z){
			//pixel is in shadow
			maxLight = uShadow;
			#if defined(PHONG)
				if(maxLight < uAmbient)
					maxLight = uAmbient;
			#endif
		}
	}
#endif

#if defined(PHONG)
	// Calculate the dot product of the light vector and vertex normal. If the normal and light vector are
	// pointing in the same direction then it will get max illumination.
	float lightKdir=1.0;
	float lightKtrans=0.0;
	if(uTranslucency != 0.0){
		if(uTranslucency<0.5)
			lightKtrans=uTranslucency*2.0;
		else{//uTranslucency>=0.5
			lightKtrans=1.0;
			lightKdir=(1.0-uTranslucency)*2.0;
		}
	}
	float illuminationDir=0.0;
	if(lightKdir>0.0){
		float dotProduct = dot(vNormalNormal, uVectorToLight);
		#if defined(WIRE)
			if(dotProduct < 0.0)
				dotProduct = -dotProduct;
			dotProduct = sqrt(1.0 - dotProduct);
		#endif		
		illuminationDir = dotProduct * lightKdir;	
	}
	float illuminationTrans=0.0;
	if(lightKtrans>0.0){
		float dotProduct = dot(vNormalNormal, uVectorToTranslucent);
		#if defined(WIRE)
			if(dotProduct < 0.0)
				dotProduct = -dotProduct;
			dotProduct = sqrt(1.0 - dotProduct);
		#endif		
		illuminationTrans = dotProduct * lightKtrans;	
	}
	float illumination = max(illuminationDir,illuminationTrans);

	illumination += uAmbient;
	
	#if defined(WITHSHADOWS)
		if(uTranslucency == 0.0)
			if(illumination > maxLight)
				illumination = maxLight;
	#endif
	
	// Multiply the color by the lightIntencity illumination level to get final output color.
	if(illumination < 1.0){
		if(uShadingK != 1.0)
			illumination = 1.0 - (1.0 - illumination)*uShadingK;
		
		if(illumination < uAmbient)
			illumination = uAmbient;
		FragColor *= illumination;
	}
	else
	if(illumination > 1.0){ //highlight/bleach ?
		if(uBleach > 0.0){
			float bleach = (illumination-1.0) * uBleach;
			if(bleach > uBleach)
				bleach = uBleach;
			FragColor += bleach;
		}
	}
#if defined(WITHSHADOWS)
	if(maxLight >= 1.0)
#endif
	if(uSpecularIntencity>0.0){
		//specular light
		// INTENSITY OF THE SPECULAR LIGHT
		// DOT PRODUCT OF NORMAL VECTOR AND THE HALF VECTOR TO THE POWER OF THE SPECULAR HARDNESS
		vec3 vNormalHalfVector = normalize(vHalfVector);
		float dotProduct = dot(vNormalNormal, vNormalHalfVector);
#if defined(WIRE)
		if(dotProduct < 0.0)
			dotProduct = -dotProduct;
		dotProduct = sqrt(1.0 - dotProduct);
#endif		
		if(dotProduct>uSpecularMinDot[1])
			FragColor += uSpecularIntencity;
		else
		if(dotProduct>uSpecularMinDot[0]){
			float specularIntencity = pow(dotProduct, uSpecularPowerOf) * uSpecularIntencity;		
			if(specularIntencity > uSpecularIntencity)
				specularIntencity = uSpecularIntencity;
			FragColor += specularIntencity;
		}
	}
#endif
	if(uHighLightLevel>0.0)
		FragColor.rgb = FragColor.rgb*(1.0-uHighLightLevel) + uHighLightColor.rgb*uHighLightLevel;

	if(uAlphaFactor != 1.0)
		alpha *= uAlphaFactor;	
	FragColor.a = alpha;
}


